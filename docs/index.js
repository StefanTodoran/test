"use strict";var __awaiter=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,c){function i(e){try{s(o.next(e))}catch(e){c(e)}}function a(e){try{s(o.throw(e))}catch(e){c(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}s((o=o.apply(e,t||[])).next())}))};!function(){function e(e,t){return e.scrollTop>t.offsetTop-2*t.offsetHeight}function t(e,t){e.scrollTo({top:t.offsetTop-t.offsetHeight,behavior:"smooth"})}function n(e,t){return Math.max(e,Math.round(Math.random()*t))}function o(){const t=document.getElementById("wrapper"),r=document.getElementById("freelance-section");if("visible"==document.visibilityState&&!e(t,r)){const e=document.getElementById("leaf-template"),t=e.cloneNode(!1);t.classList.remove("hidden"),t.style.setProperty("--duration",`${n(3,7)}s`),t.style.setProperty("--position",`${n(5,95)}vw`),e.parentNode.insertBefore(t,e),setTimeout((()=>{t.remove()}),8e3)}setTimeout(o,1e3*n(3,8))}window.addEventListener("load",(function(){var n;(function(){const e=new IntersectionObserver((t=>{t.forEach((t=>{if(t.isIntersecting){const n=t.target;n.src=n.dataset.src,n.classList.remove("lazy-load"),e.unobserve(n)}}))}));document.querySelectorAll(".lazy-load").forEach((t=>e.observe(t)))})(),function(){const e=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&(t.target.classList.add("shown"),e.unobserve(t.target))}))}),{root:null,rootMargin:"0px",threshold:.5});document.querySelectorAll(".dynamic-item").forEach((t=>e.observe(t)));document.querySelectorAll(".client-tip").forEach((t=>e.observe(t)))}(),function(){const n=document.getElementById("freelance-section"),o=document.getElementById("projects-section"),r=document.getElementById("contact-section"),c=document.getElementById("wrapper"),i=document.getElementById("indicator");c.addEventListener("scroll",(function(){let t="home";e(c,r)?t="contact":e(c,o)?t="projects":e(c,n)&&(t="freelance"),i.classList.remove("home","freelance","projects","contact"),i.classList.add(t)}));const a=document.getElementById("home-btn"),s=document.getElementById("back-to-top-btn"),d=()=>c.scrollTo({top:0,behavior:"smooth"});null==a||a.addEventListener("click",d),null==s||s.addEventListener("click",d);[{id:"freelance-btn",target:n},{id:"projects-btn",target:o},{id:"contact-btn",target:r}].forEach((e=>{document.getElementById(e.id).addEventListener("click",(()=>t(c,e.target)))}));l=document.getElementById("goto-contact-btn"),u=e=>{t(c,r),e.preventDefault()},l.addEventListener("click",u),l.addEventListener("keydown",(e=>{"Enter"===e.code&&u(e)}));var l,u}(),r="./assets/svg/back-to-top_hover.svg",(new Image).src=r,o(),function(){__awaiter(this,void 0,void 0,(function*(){let e=yield function(e,t){return __awaiter(this,void 0,void 0,(function*(){const n=`https://api.github.com/repos/${e}/${t}/commits`;try{const e=yield fetch(n),t=yield e.json();if(!(t.length>0))throw new Error("No commits found in the repository.");const o=t[0];return new Date(o.commit.author.date)}catch(e){console.error("Error retrieving commit data:",e.message)}return null}))}("StefanTodoran","StefanTodoran.github.io");if(!e)return;e=e.toLocaleString("en-US",{month:"2-digit",day:"2-digit",year:"numeric"});document.getElementById("last-updated").innerText=e}))}();var r;const c=document.getElementById("loader-container");null==c||c.classList.add("loaded"),function(){return-1!==navigator.userAgent.toLowerCase().indexOf("firefox")}()&&(null===(n=document.getElementById("menu-container"))||void 0===n||n.classList.add("firefox-fix"))}))}();